1-3. You should really just have these memorized by now.
   The other callee-save registers are r12, r13, r14, r15, rsp, rbp.

4. We can determine that x is a long, because it's passed through
   the register %rdi, and is referenced as %rdi (instead of %edi, etc.).
   It can't be unsigned in this case, because our base case x <= 0...
   it wouldn't make much sense to have an unsigned value less than 0!

5. We can dermine y is an (signed) int, because it's initially referenced 
   with %esi, and it gets sign-extended to a long to get compared against
   x in the first condition.

6. We can tell from the first comparison: cmpq	%rdi, %rax
   that we are computing y-x ? 0 and setting condition codes based on this.
   The jump on the next line allows us to see what the ? is: jl	.L9
   which shows us that we want y-x < 0, or y < x (which I wrote as x > y
   originally/in the solution).

7. In .L9, we see that we compute subq	%rax, %rdi: x = x-y, so our 
   update here must be foo(x-y, y).

8. Similar to 7, in the case where we don't take the jump, we compute
   subq	$1, %rdi: x = x-1, so our update here is foo(x-1, y).

9-11. Now that we've rebuilt the code, we can follow it through from foo(7,3)
   until we reach the base case. At first, 7 > 3, so we call foo(7-3,3).
   Next, we have 4 > 3, so we call foo(4-3,3). Next, we have 1 < 3, so we
   call foo(1-1, 3). Finally, 0 == 0, so we've hit the base case. For 9, we've
   incremented our result by 1 a total of 3 times before reaching the base case,
   so our result is 3. We can also see that there were a total of 4 calls made,
   so 4 total stack frames are created, and we never returned from these until
   the base case was reached, so both 10 and 11 are 4.